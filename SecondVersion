import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.BorderPane;
import javafx.scene.shape.Rectangle;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.geometry.*;
import javafx.scene.control.TextField;
import javafx.scene.control.Label;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;

public class Project extends Application {
	@Override
	public void start(Stage primaryStage) {

		CheckerPane checker = new CheckerPane(10, 100);
		// 객체 생성
		Hunter hunter = new Hunter();
		
		/*checker.addNode(hunter.imageView, 1, 5);
		hunter.setLocation(0, 6);
		checker.getChildren().add(hunter.imageView);*/
		
		// 객체 위치 랜덤 생성, 중복 제거
		int[] seed = new int[1000];
		for(int i=0; i<seed.length;i++) {
			seed[i] = i;
		}
		Integer[] array = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		ArrayList<Integer> rowList = new ArrayList<Integer>(Arrays.asList(array));
		Collections.shuffle(rowList, new Random(seed[1]));
		ArrayList<Integer> colList = new ArrayList<>(Arrays.asList(array));
		Collections.shuffle(colList, new Random(seed[2]));
		ArrayList<Integer> locationList = new ArrayList<Integer>();
		
		
		
		Text text = new Text("Hunter's Hp : " + hunter.getHp());
		Text textIsPossible = new Text(hunter.getPotionPossible() + " Potion Left");
		Set s = new Set();
		BorderPane pane = new BorderPane();
		pane.setPadding(new Insets(20, 20, 20, 10));

		// setting 화면
		GridPane labelPane = new GridPane();
		labelPane.setPadding(new Insets(2, 2, 2, 2));
		labelPane.setAlignment(Pos.CENTER);
		labelPane.setPrefWidth(380.0);
		labelPane.setStyle("-fx-border-color: black");
		labelPane.setVgap(30);

		Label tigerNum = new Label("Set Number of Tiger : ");
		TextField tigerField = new TextField();
		tigerField.setPromptText("Enter 1~5");
		labelPane.add(tigerNum, 0, 0);
		labelPane.add(tigerField, 1, 0);

		Label rabbitNum = new Label("Set Number of Rabbit : ");
		TextField rabbitField = new TextField();
		rabbitField.setPromptText("Enter 1~10");
		labelPane.add(rabbitNum, 0, 1);
		labelPane.add(rabbitField, 1, 1);

		Label grassNum = new Label("Set Number of Grass : ");
		TextField grassField = new TextField();
		grassField.setPromptText("Enter 1~10");
		labelPane.add(grassNum, 0, 2);
		labelPane.add(grassField, 1, 2);

		Label trapNum = new Label("Set Number of Trap : ");
		TextField trapField = new TextField();
		trapField.setPromptText("Enter 1~5");
		labelPane.add(trapNum, 0, 3);
		labelPane.add(trapField, 1, 3);

		// 게임진행에 필요한 버튼들
		Button btStart = new Button("Start The Game!");
		Button btPotion = new Button("Potion");
		Button btUp = new Button("     Go Up     ");
		Button btRight = new Button("  Go Right  ");
		Button btDown = new Button("   Go Down   ");
		Button btLeft = new Button("    Go Left    ");
		Button btUpLeft = new Button("  Go UpLeft  ");
		Button btUpRight = new Button("   Go UpRight   ");
		Button btDownLeft = new Button("Go DownLeft");
		Button btDownRight = new Button("Go DownRight");

		labelPane.add(btStart, 1, 4);
		// start 버튼 클릭 event
		btStart.setOnAction(e -> {//입력받은 수 만큼 객체 생성
			Tiger[] tigerArr = new Tiger[10];
			Rabbit[] rabbitArr = new Rabbit[10];
			Grass[] grassArr = new Grass[10];
			Trap[] trapArr = new Trap[10];
			
			s.setTiger(Integer.parseInt(tigerField.getText())); 
			s.setRabbit(Integer.parseInt(rabbitField.getText()));
			s.setGrass(Integer.parseInt(grassField.getText())); 
			s.setTrap(Integer.parseInt(trapField.getText()));
			labelPane.add(btPotion, 0, 5); labelPane.add(text, 0, 6); labelPane.add(textIsPossible, 0, 7);
			labelPane.add(btUp, 1, 8);     labelPane.add(btLeft, 0, 9); labelPane.add(btRight, 2, 9);
			labelPane.add(btDown, 1, 10);  labelPane.add(btUpLeft, 2, 8); labelPane.add(btUpRight, 0, 8); 
			labelPane.add(btDownLeft, 0, 10); labelPane.add(btDownRight, 2, 10);
			
			for(int i=0;i<s.totalNumOfTiger;i++) {
				tigerArr[i] = new Tiger();
				tigerArr[i].setLocation(0, 6);
				
				checker.getChildren().add(tigerArr[i].imageView);
			}
			for(int i=0;i<s.totalNumOfRabbit;i++) {
				rabbitArr[i] = new Rabbit();
				
				checker.getChildren().add(rabbitArr[i].imageView);
			}
			for(int i=0;i<s.totalNumOfGrass;i++) {
				grassArr[i] = new Grass();
				
				checker.getChildren().add(grassArr[i].imageView);
			}
			for(int i=0;i<s.totalNumOfTrap;i++) {
				trapArr[i] = new Trap();
				
				checker.getChildren().add(trapArr[i].imageView);
			}
			/*while (hunter.getHp() >= 0) {

			}*/
		});

		// potion 사용 가능 여부 출력
		btPotion.setOnAction(e -> {
			if (hunter.potionPossible > 0) {
				hunter.potion();
				hunter.potionPossible--;
				text.setText("Hunter's Hp : " + hunter.getHp());
				textIsPossible.setText(hunter.getPotionPossible() + " Potion Left");
				System.out.print(hunter.getRow());
			} else {
				text.setText("You Can Not Use Potion!!");
			}
		});

		pane.setLeft(checker);
		pane.setRight(labelPane);

		Scene scene = new Scene(pane);
		primaryStage.setTitle("Hunter_Game");
		primaryStage.setScene(scene);
		primaryStage.setResizable(false);
		primaryStage.show();
		
		
		class Start{
			public void startGame() {
				
			}
		}
		
	}

	class Set {
		public int totalNumOfTiger = 0;
		public int totalNumOfRabbit = 0;
		public int totalNumOfGrass = 0;
		public int totalNumOfTrap = 0;

		public void setTiger(int tigerNum) {
			totalNumOfTiger = tigerNum;
		}

		public void setRabbit(int tigerNum) {
			totalNumOfRabbit = tigerNum;
		}

		public void setGrass(int tigerNum) {
			totalNumOfGrass = tigerNum;
		}

		public void setTrap(int tigerNum) {
			totalNumOfTrap = tigerNum;
		}
	}

	// 게임 판 만듦
	class CheckerPane extends GridPane {
		CheckerPane() {

		}

		CheckerPane(int n, int squareSize) {
			for (int col = 0; col < n; col++) {
				boolean isWhite = col % 2 == 0 ? true : false;
				for (int row = 0; row < n; row++) {
					Rectangle rect = new Rectangle(0, 0, squareSize, squareSize);
					rect.setFill(isWhite ? Color.WHITE : Color.SKYBLUE);
					rect.setStroke(Color.BLACK);
					isWhite = !isWhite;
					add(rect, col, row);
				}
			}
		}

		public void addNode(ImageView i, int col, int row) {
			super.add(i, col, row);
		}

	}

//클래스
	interface Interaction {
		// 사냥꾼이 동물 잡는 것, 호랑이가 토끼 잡아먹는 것, 토끼가 풀 먹는 것, 함정에 빠지는 것
		// public abstract void catchObject();
		// public abstract void move();
		public abstract void die();
	}

	class Hunter extends CheckerPane implements Interaction {

		private int hunterLevel = 4;
		private int Hp = 3;
		private int potionNum = 3;
		private int potionPossible = 3;
		private int score;
		private int row;
		private int col;
		Image image = new Image("hunter.jpg");
		ImageView imageView = new ImageView(image);

		Hunter() {
			imageView.setFitHeight(100);
			imageView.setFitWidth(100);
		}

		public void setLocation(int col, int row) {
			super.addNode(imageView, col, row);
			row = getRowIndex(imageView);
			col = getColumnIndex(imageView);
		}

		public int getRow() {
			return row;
		}

		public int getcol() {
			return col;
		}

		public void potion() {
			setHp(4);
		}

		public int getPotionPossible() {
			return potionPossible;
		}

		public void setHp(int Hp) {
			this.Hp = Hp;
		}

		public int getHp() {
			return Hp;
		}

		public void move() {
			
		}

		public void die() {

		}

		public int getLevel() {
			return hunterLevel;
		}

		public void finishOfGame() {// hunter의 hp가 0이 되면 게임 끝
			/*
			 * while(Hp >= 0) { //새로운 innerclass만들어보기 }
			 */
		}
	}

	class Tiger extends CheckerPane implements Interaction {
		private int tigerLevel = 3;

		private int row;
		private int col;
		Image image = new Image("tiger.jpg");
		ImageView imageView = new ImageView(image);

		Tiger() {
			imageView.setFitHeight(100);
			imageView.setFitWidth(100);
		}

		public void setLocation(int col, int row) {
			super.addNode(imageView, col, row);
			row = getRowIndex(imageView);
			col = getColumnIndex(imageView);
		}

		public int getRow() {
			return row;
		}

		public int getcol() {
			return col;
		}

		public void move() {

		}

		public void die() {

		}

		public int getLevel() {
			return tigerLevel;
		}
	}

	class Rabbit extends CheckerPane implements Interaction {
		private int rabbitLevel = 2;
		private int row;
		private int col;
		Image image = new Image("rabbit.jpg");
		ImageView imageView = new ImageView(image);

		Rabbit() {
			imageView.setFitHeight(100);
			imageView.setFitWidth(100);
		}

		public void setLocation(int col, int row) {
			super.addNode(imageView, col, row);
			row = getRowIndex(imageView);
			col = getColumnIndex(imageView);
		}

		public int getRow() {
			return row;
		}

		public int getcol() {
			return col;
		}

		public void move() {

		}

		public void die() {

		}

		public int getLevel() {
			return rabbitLevel;
		}
	}

	class Grass extends CheckerPane implements Interaction {
		private int grassLevel = 1;
		private int row;
		private int col;
		Image image = new Image("grass.jpg");
		ImageView imageView = new ImageView(image);

		Grass() {
			imageView.setFitHeight(100);
			imageView.setFitWidth(100);
		}

		public void setLocation(int col, int row) {
			super.addNode(imageView, col, row);
			row = getRowIndex(imageView);
			col = getColumnIndex(imageView);
		}

		public int getRow() {
			return row;
		}

		public int getcol() {
			return col;
		}

		public void die() {

		}

		public int getLevel() {
			return grassLevel;
		}
	}

	class Trap extends CheckerPane {
		private int trapLevel = 5;
		private int row;
		private int col;
		Image image = new Image("trap.jpg");
		ImageView imageView = new ImageView(image);

		Trap() {
			imageView.setFitHeight(100);
			imageView.setFitWidth(100);
		}

		public void setLocation(int col, int row) {
			super.addNode(imageView, col, row);
			row = getRowIndex(imageView);
			col = getColumnIndex(imageView);
		}

		public int getRow() {
			return row;
		}

		public int getcol() {
			return col;
		}

		public int getLevel() {
			return trapLevel;
		}
	}

	public static void main(String[] args) {
		Application.launch(args);
	}
}
